 Flask Application Configuration
# ============================

# Environment
# ----------
# Set the Flask environment (development, production, or testing)
# In production, this should be set to 'production'
FLASK_ENV=development

# Application
# ----------
# Main application file
FLASK_APP=app.py

# Server Configuration
# ------------------
# Host to bind the application to
# Use 127.0.0.1 for development, 0.0.0.0 for production
FLASK_HOST=127.0.0.1

# Port to run the application on
FLASK_PORT=5000

# Debug mode (set to False in production)
FLASK_DEBUG=True

# Security Configuration
# ====================
# IMPORTANT: Generate new secure values for production using:
# openssl rand -hex 32

# Secret key for Flask session encryption
# Generate with: openssl rand -hex 32
SECRET_KEY=dev-secret-key-123

# CSRF protection secret key
# Generate with: openssl rand -hex 32
CSRF_SECRET_KEY=dev-csrf-secret-key-123

# Password hashing algorithm
# Options: sha256, sha512
PASSWORD_HASH_ALGORITHM=sha256

# Session Configuration
# ===================
# Session lifetime in seconds (default: 1 hour)
PERMANENT_SESSION_LIFETIME=3600

# Security headers for cookies
SESSION_COOKIE_SECURE=False  # Set to True in production
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# Security Headers
# ==============
# Enable HTTP Strict Transport Security
HSTS_ENABLED=True

# HSTS max-age in seconds (default: 1 year)
HSTS_MAX_AGE=31536000

# Enable Content Security Policy
CSP_ENABLED=True

# Database Configuration
# ===================
# SQLite database filename
DATABASE_NAME=crm_multi.db

# Default database key for multi-tenant setup
DEFAULT_DB_KEY=default

# Production Checklist
# ==================
# When deploying to production:
# 1. Set FLASK_ENV=production
# 2. Set FLASK_DEBUG=False
# 3. Generate new SECRET_KEY and CSRF_SECRET_KEY
# 4. Set SESSION_COOKIE_SECURE=True
# 5. Set appropriate FLASK_HOST and FLASK_PORT
# 6. Consider using a proper database server instead of SQLite
# 7. Set up proper SSL/TLS certificates
# 8. Configure a reverse proxy (e.g., Nginx)
# 9. Set up proper logging
# 10. Configure monitoring and alerting